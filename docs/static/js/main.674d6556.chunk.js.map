{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","components/GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","state","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","response","json","data","gifs","map","img","id","title","images","downsized_medium","useFetchGifs","loading","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","key","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"0NAmCeA,EAhCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgBzC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA2BO,OACzCN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAlBoB,SAACP,GACzBF,EAAcE,EAAMQ,OAAOF,QAkBvBG,YAAY,kB,uBCNLC,EAnBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACRC,EADQ,iDACwCC,UACpDH,GAFY,+DAMSI,MAAMF,GANf,cAMRG,EANQ,gBAOSA,EAASC,OAPlB,uBAONC,EAPM,EAONA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAbxB,kBAgBPM,GAhBO,4CAAH,sDCqBEO,EAlBM,SAACf,GAAc,IAAD,EACPf,mBAAS,CACjCsB,KAAM,GACNS,SAAS,IAHsB,mBAC1BvB,EAD0B,KACnBwB,EADmB,KAejC,OATAC,qBAAU,WACRnB,EAAQC,GAAUmB,MAAK,SAACC,GACtBH,EAAS,CACPV,KAAMa,EACNJ,SAAS,SAGZ,CAAChB,IAEGP,GCPM4B,EATK,SAAC,GAAoB,IAAlBT,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAC5B,OACE,yBAAKoB,UAAU,0CACb,yBAAKC,IAAKrB,EAAKsB,IAAKZ,IACpB,2BAAIA,KCiBKa,EAlBC,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,EACEe,EAAaf,GAAjCa,EADkB,EACxBN,KAAcS,EADU,EACVA,QAEtB,OACE,oCACE,wBAAIM,UAAU,qCAAqCtB,GAClDgB,GACC,uBAAGM,UAAU,oCAAb,cAEF,yBAAKA,UAAU,aAAf,OACGT,QADH,IACGA,OADH,EACGA,EAAQJ,KAAI,SAACC,GACZ,OAAO,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UCchCiB,G,MAvBO,WAAO,IAAD,EACU1C,mBAAS,CAAC,eADpB,mBACnB2C,EADmB,KACP5C,EADO,KAQ1B,OACE,oCACE,+CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACG4C,EAAWnB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS0B,IAAK1B,EAAUA,SAAUA,W,MChB5C6B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.674d6556.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (event) => {\r\n    setInputValue(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      setCategories((state) => [inputValue, ...state]);\r\n      setInputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Searcher...\"\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddCategory;\r\n","const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=bMiqicBkCL9Td4ItVZsSUxYjg6Ie6YbY`;\r\n\r\n  //encodeURI()  fix the possible spaces in the string\r\n  const response = await fetch(url);\r\n  const { data } = await response.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n  return gifs;\r\n};\r\n\r\nexport default getGifs;\r\n","import { useState, useEffect } from \"react\";\r\nimport getGifs from \"../helpers/getGifs\";\r\n\r\nconst useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setState({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n\r\nexport default useFetchGifs;\r\n","import React from \"react\";\r\n\r\nconst GifGridItem = ({ title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GifGridItem;\r\n","import React from \"react\";\r\nimport useFetchGifs from \"../hooks/useFetchGifs\";\r\n\r\nimport GifGridItem from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && (\r\n        <p className=\"animate__animated animate__flash\">Loading...</p>\r\n      )}\r\n      <div className=\"card-grid\">\r\n        {images?.map((img) => {\r\n          return <GifGridItem key={img.id} {...img} />;\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GifGrid;\r\n","import React, { useState } from \"react\";\r\n\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nimport \"./styles/GiftExpertApp.css\";\r\n\r\nconst GiftExpertApp = () => {\r\n  const [categories, setCategories] = useState([\"Death Note\"]);\r\n\r\n  //   const handleAdd = () => {\r\n  //     setCategories((categories) => [...categories, \"Pokemon\"]);\r\n  //     // setCategories([...categories, \"Pokemon\"]);\r\n  //   };\r\n\r\n  return (\r\n    <>\r\n      <h1>Gift Expert App</h1>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GiftExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport GifExpertApp from \"./components/GiftExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}